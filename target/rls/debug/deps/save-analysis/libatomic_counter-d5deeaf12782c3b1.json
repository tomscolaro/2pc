{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"C:\\Users\\tscol\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-counter-1.0.1","program":"C:\\Users\\tscol\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\bin\\rls.exe","arguments":["--crate-name","atomic_counter","C:\\Users\\tscol\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-counter-1.0.1\\src\\lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","-C","metadata=d5deeaf12782c3b1","-C","extra-filename=-d5deeaf12782c3b1","--out-dir","c:\\Users\\tscol\\projects\\parallel_systems\\skeleton_2pc\\target\\rls\\debug\\deps","-L","dependency=c:\\Users\\tscol\\projects\\parallel_systems\\skeleton_2pc\\target\\rls\\debug\\deps","--cap-lints","allow","--error-format=json","--sysroot","C:\\Users\\tscol\\.rustup/toolchains/stable-x86_64-pc-windows-msvc"],"output":"c:\\Users\\tscol\\projects\\parallel_systems\\skeleton_2pc\\target\\rls\\debug\\deps\\libatomic_counter-d5deeaf12782c3b1.rmeta"},"prelude":{"crate_id":{"name":"atomic_counter","disambiguator":[8879030542065730089,0]},"crate_root":"C:\\Users\\tscol\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-counter-1.0.1\\src","external_crates":[{"file_name":"C:\\Users\\tscol\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-counter-1.0.1\\src\\lib.rs","num":1,"id":{"name":"std","disambiguator":[9342617112176241148,0]}},{"file_name":"C:\\Users\\tscol\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-counter-1.0.1\\src\\lib.rs","num":2,"id":{"name":"core","disambiguator":[4254339723928084606,0]}},{"file_name":"C:\\Users\\tscol\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-counter-1.0.1\\src\\lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[3486696887053314680,0]}},{"file_name":"C:\\Users\\tscol\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-counter-1.0.1\\src\\lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[10417808552611688108,0]}},{"file_name":"C:\\Users\\tscol\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-counter-1.0.1\\src\\lib.rs","num":5,"id":{"name":"alloc","disambiguator":[6916017011462710319,0]}},{"file_name":"C:\\Users\\tscol\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-counter-1.0.1\\src\\lib.rs","num":6,"id":{"name":"libc","disambiguator":[13752934007443356720,0]}},{"file_name":"C:\\Users\\tscol\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-counter-1.0.1\\src\\lib.rs","num":7,"id":{"name":"unwind","disambiguator":[5348812548075192003,0]}},{"file_name":"C:\\Users\\tscol\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-counter-1.0.1\\src\\lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[9508248468295282807,0]}},{"file_name":"C:\\Users\\tscol\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-counter-1.0.1\\src\\lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[11933164273756333527,0]}},{"file_name":"C:\\Users\\tscol\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-counter-1.0.1\\src\\lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[18246369849426865768,0]}},{"file_name":"C:\\Users\\tscol\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-counter-1.0.1\\src\\lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[5159565965575875197,0]}},{"file_name":"C:\\Users\\tscol\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-counter-1.0.1\\src\\lib.rs","num":12,"id":{"name":"std_detect","disambiguator":[10542310606707790456,0]}},{"file_name":"C:\\Users\\tscol\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-counter-1.0.1\\src\\lib.rs","num":13,"id":{"name":"panic_unwind","disambiguator":[12588077360254888373,0]}}],"span":{"file_name":"C:\\Users\\tscol\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-counter-1.0.1\\src\\lib.rs","byte_start":1,"byte_end":12485,"line_start":2,"line_end":364,"column_start":1,"column_end":2}},"imports":[],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"C:\\Users\\tscol\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-counter-1.0.1\\src\\lib.rs","byte_start":1,"byte_end":12485,"line_start":2,"line_end":364,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"C:\\Users\\tscol\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-counter-1.0.1\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":6},{"krate":0,"index":7},{"krate":0,"index":8},{"krate":0,"index":10},{"krate":0,"index":11},{"krate":0,"index":13},{"krate":0,"index":38},{"krate":0,"index":41},{"krate":0,"index":43},{"krate":0,"index":20},{"krate":0,"index":22},{"krate":0,"index":45},{"krate":0,"index":48},{"krate":0,"index":50},{"krate":0,"index":29},{"krate":0,"index":31}],"decl_id":null,"docs":" # AtomicCounter","sig":null,"attributes":[{"value":"/ # AtomicCounter","span":{"file_name":"C:\\Users\\tscol\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-counter-1.0.1\\src\\lib.rs","byte_start":1,"byte_end":20,"line_start":2,"line_end":2,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"C:\\Users\\tscol\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-counter-1.0.1\\src\\lib.rs","byte_start":21,"byte_end":24,"line_start":3,"line_end":3,"column_start":1,"column_end":4}},{"value":"/ Atomic (thread-safe) counters for Rust.","span":{"file_name":"C:\\Users\\tscol\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-counter-1.0.1\\src\\lib.rs","byte_start":25,"byte_end":68,"line_start":4,"line_end":4,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\tscol\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-counter-1.0.1\\src\\lib.rs","byte_start":69,"byte_end":72,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ This crate contains an [`AtomicCounter`](trait.AtomicCounter.html) trait","span":{"file_name":"C:\\Users\\tscol\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-counter-1.0.1\\src\\lib.rs","byte_start":73,"byte_end":149,"line_start":6,"line_end":6,"column_start":1,"column_end":77}},{"value":"/ that can safely be shared across threads.","span":{"file_name":"C:\\Users\\tscol\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-counter-1.0.1\\src\\lib.rs","byte_start":150,"byte_end":195,"line_start":7,"line_end":7,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\tscol\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-counter-1.0.1\\src\\lib.rs","byte_start":196,"byte_end":199,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ This crate provides two implementations:","span":{"file_name":"C:\\Users\\tscol\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-counter-1.0.1\\src\\lib.rs","byte_start":200,"byte_end":244,"line_start":9,"line_end":9,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\tscol\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-counter-1.0.1\\src\\lib.rs","byte_start":245,"byte_end":248,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ * [`RelaxedCounter`](struct.RelaxedCounter.html) which is suitable for","span":{"file_name":"C:\\Users\\tscol\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-counter-1.0.1\\src\\lib.rs","byte_start":249,"byte_end":323,"line_start":11,"line_end":11,"column_start":1,"column_end":75}},{"value":"/     e.g. collecting metrics or generate IDs, but which does not provide","span":{"file_name":"C:\\Users\\tscol\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-counter-1.0.1\\src\\lib.rs","byte_start":324,"byte_end":399,"line_start":12,"line_end":12,"column_start":1,"column_end":76}},{"value":"/     [\"Sequential Consistency\"](https://doc.rust-lang.org/nomicon/atomics.html#sequentially-consistent).","span":{"file_name":"C:\\Users\\tscol\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-counter-1.0.1\\src\\lib.rs","byte_start":400,"byte_end":507,"line_start":13,"line_end":13,"column_start":1,"column_end":108}},{"value":"/     `RelaxedCounter` uses [`Relaxed`](https://doc.rust-lang.org/std/sync/atomic/enum.Ordering.html#variant.Relaxed)","span":{"file_name":"C:\\Users\\tscol\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-counter-1.0.1\\src\\lib.rs","byte_start":508,"byte_end":627,"line_start":14,"line_end":14,"column_start":1,"column_end":120}},{"value":"/     memory ordering.","span":{"file_name":"C:\\Users\\tscol\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-counter-1.0.1\\src\\lib.rs","byte_start":628,"byte_end":652,"line_start":15,"line_end":15,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"C:\\Users\\tscol\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-counter-1.0.1\\src\\lib.rs","byte_start":653,"byte_end":656,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ * [`ConsistentCounter`](struct.ConsistentCounter.html) which provides the","span":{"file_name":"C:\\Users\\tscol\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-counter-1.0.1\\src\\lib.rs","byte_start":657,"byte_end":734,"line_start":17,"line_end":17,"column_start":1,"column_end":78}},{"value":"/     same interface but is sequentially consistent. Use this counter if the","span":{"file_name":"C:\\Users\\tscol\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-counter-1.0.1\\src\\lib.rs","byte_start":735,"byte_end":813,"line_start":18,"line_end":18,"column_start":1,"column_end":79}},{"value":"/     order of update from multiple threads is important.","span":{"file_name":"C:\\Users\\tscol\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-counter-1.0.1\\src\\lib.rs","byte_start":814,"byte_end":873,"line_start":19,"line_end":19,"column_start":1,"column_end":60}},{"value":"/     `ConsistentCounter` uses [`Sequentially Consistent`](https://doc.rust-lang.org/std/sync/atomic/enum.Ordering.html#variant.SeqCst)","span":{"file_name":"C:\\Users\\tscol\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-counter-1.0.1\\src\\lib.rs","byte_start":874,"byte_end":1011,"line_start":20,"line_end":20,"column_start":1,"column_end":138}},{"value":"/     memory ordering.","span":{"file_name":"C:\\Users\\tscol\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-counter-1.0.1\\src\\lib.rs","byte_start":1012,"byte_end":1036,"line_start":21,"line_end":21,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"C:\\Users\\tscol\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-counter-1.0.1\\src\\lib.rs","byte_start":1037,"byte_end":1040,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ Both implementations are lock-free. Both are a very thin layer over","span":{"file_name":"C:\\Users\\tscol\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-counter-1.0.1\\src\\lib.rs","byte_start":1041,"byte_end":1112,"line_start":23,"line_end":23,"column_start":1,"column_end":72}},{"value":"/ [`AtomicUsize`](https://doc.rust-lang.org/std/sync/atomic/struct.AtomicUsize.html)","span":{"file_name":"C:\\Users\\tscol\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-counter-1.0.1\\src\\lib.rs","byte_start":1113,"byte_end":1199,"line_start":24,"line_end":24,"column_start":1,"column_end":87}},{"value":"/ which is more powerful but might be harder to use correctly.","span":{"file_name":"C:\\Users\\tscol\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-counter-1.0.1\\src\\lib.rs","byte_start":1200,"byte_end":1264,"line_start":25,"line_end":25,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\tscol\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-counter-1.0.1\\src\\lib.rs","byte_start":1265,"byte_end":1268,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ ## Which counter to use","span":{"file_name":"C:\\Users\\tscol\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-counter-1.0.1\\src\\lib.rs","byte_start":1269,"byte_end":1296,"line_start":27,"line_end":27,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\tscol\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-counter-1.0.1\\src\\lib.rs","byte_start":1297,"byte_end":1300,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ * If you are just collecting metrics, the `RelaxedCounter` is probably right choice.","span":{"file_name":"C:\\Users\\tscol\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-counter-1.0.1\\src\\lib.rs","byte_start":1301,"byte_end":1389,"line_start":29,"line_end":29,"column_start":1,"column_end":89}},{"value":"/","span":{"file_name":"C:\\Users\\tscol\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-counter-1.0.1\\src\\lib.rs","byte_start":1390,"byte_end":1393,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ * If you are generating IDs, but don't make strong assumptions (like allocating","span":{"file_name":"C:\\Users\\tscol\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-counter-1.0.1\\src\\lib.rs","byte_start":1394,"byte_end":1477,"line_start":31,"line_end":31,"column_start":1,"column_end":84}},{"value":"/     memory based on the ID count), `RelaxedCounter` is probably the right choice.","span":{"file_name":"C:\\Users\\tscol\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-counter-1.0.1\\src\\lib.rs","byte_start":1478,"byte_end":1563,"line_start":32,"line_end":32,"column_start":1,"column_end":86}},{"value":"/","span":{"file_name":"C:\\Users\\tscol\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-counter-1.0.1\\src\\lib.rs","byte_start":1564,"byte_end":1567,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ * If you are generating multiple IDs where you maintain an ordering","span":{"file_name":"C:\\Users\\tscol\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-counter-1.0.1\\src\\lib.rs","byte_start":1568,"byte_end":1639,"line_start":34,"line_end":34,"column_start":1,"column_end":72}},{"value":"/     invariant (e.g. ID `a` is always greater than ID `b`), you need \"Sequential","span":{"file_name":"C:\\Users\\tscol\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-counter-1.0.1\\src\\lib.rs","byte_start":1640,"byte_end":1723,"line_start":35,"line_end":35,"column_start":1,"column_end":84}},{"value":"/     Consistency\" and thus need to use `ConsistentCounter`. The same is true","span":{"file_name":"C:\\Users\\tscol\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-counter-1.0.1\\src\\lib.rs","byte_start":1724,"byte_end":1803,"line_start":36,"line_end":36,"column_start":1,"column_end":80}},{"value":"/     for all use cases where the _ordering_ of incrementing the counter is","span":{"file_name":"C:\\Users\\tscol\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-counter-1.0.1\\src\\lib.rs","byte_start":1804,"byte_end":1881,"line_start":37,"line_end":37,"column_start":1,"column_end":78}},{"value":"/     important.","span":{"file_name":"C:\\Users\\tscol\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-counter-1.0.1\\src\\lib.rs","byte_start":1882,"byte_end":1900,"line_start":38,"line_end":38,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\tscol\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-counter-1.0.1\\src\\lib.rs","byte_start":1901,"byte_end":1904,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"/ ## No updates are lost - It's just about the ordering!","span":{"file_name":"C:\\Users\\tscol\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-counter-1.0.1\\src\\lib.rs","byte_start":1905,"byte_end":1963,"line_start":40,"line_end":40,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\tscol\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-counter-1.0.1\\src\\lib.rs","byte_start":1964,"byte_end":1967,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"/ Note that in both implementations, _no count is lost_ and all operations are atomic.","span":{"file_name":"C:\\Users\\tscol\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-counter-1.0.1\\src\\lib.rs","byte_start":1968,"byte_end":2056,"line_start":42,"line_end":42,"column_start":1,"column_end":89}},{"value":"/ The difference is _only_ in how the order of operations are observed by different","span":{"file_name":"C:\\Users\\tscol\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-counter-1.0.1\\src\\lib.rs","byte_start":2057,"byte_end":2142,"line_start":43,"line_end":43,"column_start":1,"column_end":86}},{"value":"/ threads.","span":{"file_name":"C:\\Users\\tscol\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-counter-1.0.1\\src\\lib.rs","byte_start":2143,"byte_end":2155,"line_start":44,"line_end":44,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"C:\\Users\\tscol\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-counter-1.0.1\\src\\lib.rs","byte_start":2156,"byte_end":2159,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"/ ## Example:","span":{"file_name":"C:\\Users\\tscol\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-counter-1.0.1\\src\\lib.rs","byte_start":2160,"byte_end":2175,"line_start":46,"line_end":46,"column_start":1,"column_end":16}},{"value":"/ Assume `a` is 5 and `b` is 4. You always want to maintain `a > b`.","span":{"file_name":"C:\\Users\\tscol\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-counter-1.0.1\\src\\lib.rs","byte_start":2176,"byte_end":2246,"line_start":47,"line_end":47,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\tscol\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-counter-1.0.1\\src\\lib.rs","byte_start":2247,"byte_end":2250,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"/ Thread 1 executes this code:","span":{"file_name":"C:\\Users\\tscol\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-counter-1.0.1\\src\\lib.rs","byte_start":2251,"byte_end":2283,"line_start":49,"line_end":49,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\tscol\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-counter-1.0.1\\src\\lib.rs","byte_start":2284,"byte_end":2287,"line_start":50,"line_end":50,"column_start":1,"column_end":4}},{"value":"/ ```rust,ignore","span":{"file_name":"C:\\Users\\tscol\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-counter-1.0.1\\src\\lib.rs","byte_start":2288,"byte_end":2306,"line_start":51,"line_end":51,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\tscol\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-counter-1.0.1\\src\\lib.rs","byte_start":2307,"byte_end":2310,"line_start":52,"line_end":52,"column_start":1,"column_end":4}},{"value":"/ a.inc();","span":{"file_name":"C:\\Users\\tscol\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-counter-1.0.1\\src\\lib.rs","byte_start":2311,"byte_end":2323,"line_start":53,"line_end":53,"column_start":1,"column_end":13}},{"value":"/ b.inc();","span":{"file_name":"C:\\Users\\tscol\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-counter-1.0.1\\src\\lib.rs","byte_start":2324,"byte_end":2336,"line_start":54,"line_end":54,"column_start":1,"column_end":13}},{"value":"/ ```","span":{"file_name":"C:\\Users\\tscol\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-counter-1.0.1\\src\\lib.rs","byte_start":2337,"byte_end":2344,"line_start":55,"line_end":55,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\tscol\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-counter-1.0.1\\src\\lib.rs","byte_start":2345,"byte_end":2348,"line_start":56,"line_end":56,"column_start":1,"column_end":4}},{"value":"/ Thread 2 gets counts:","span":{"file_name":"C:\\Users\\tscol\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-counter-1.0.1\\src\\lib.rs","byte_start":2349,"byte_end":2374,"line_start":57,"line_end":57,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"C:\\Users\\tscol\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-counter-1.0.1\\src\\lib.rs","byte_start":2375,"byte_end":2378,"line_start":58,"line_end":58,"column_start":1,"column_end":4}},{"value":"/ ```rust,ignore","span":{"file_name":"C:\\Users\\tscol\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-counter-1.0.1\\src\\lib.rs","byte_start":2379,"byte_end":2397,"line_start":59,"line_end":59,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\tscol\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-counter-1.0.1\\src\\lib.rs","byte_start":2398,"byte_end":2401,"line_start":60,"line_end":60,"column_start":1,"column_end":4}},{"value":"/ let a_local = a.get();","span":{"file_name":"C:\\Users\\tscol\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-counter-1.0.1\\src\\lib.rs","byte_start":2402,"byte_end":2428,"line_start":61,"line_end":61,"column_start":1,"column_end":27}},{"value":"/ let b_local = b.get();","span":{"file_name":"C:\\Users\\tscol\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-counter-1.0.1\\src\\lib.rs","byte_start":2429,"byte_end":2455,"line_start":62,"line_end":62,"column_start":1,"column_end":27}},{"value":"/ ```","span":{"file_name":"C:\\Users\\tscol\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-counter-1.0.1\\src\\lib.rs","byte_start":2456,"byte_end":2463,"line_start":63,"line_end":63,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\tscol\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-counter-1.0.1\\src\\lib.rs","byte_start":2464,"byte_end":2467,"line_start":64,"line_end":64,"column_start":1,"column_end":4}},{"value":"/ What are the values for `a_local` and `b_local`? That depends on the order","span":{"file_name":"C:\\Users\\tscol\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-counter-1.0.1\\src\\lib.rs","byte_start":2468,"byte_end":2546,"line_start":65,"line_end":65,"column_start":1,"column_end":79}},{"value":"/ in which thread 1 and 2 have run:","span":{"file_name":"C:\\Users\\tscol\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-counter-1.0.1\\src\\lib.rs","byte_start":2547,"byte_end":2584,"line_start":66,"line_end":66,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\tscol\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-counter-1.0.1\\src\\lib.rs","byte_start":2585,"byte_end":2588,"line_start":67,"line_end":67,"column_start":1,"column_end":4}},{"value":"/ * `a_local` could still be 5 and `b_local` is still be 4 (e.g. if thread 2 ran before thread 1)","span":{"file_name":"C:\\Users\\tscol\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-counter-1.0.1\\src\\lib.rs","byte_start":2589,"byte_end":2688,"line_start":68,"line_end":68,"column_start":1,"column_end":100}},{"value":"/ * `a_local` could be increment to 6 while `b_local` is still at 4 (e.g. if thread 1 and 2 ran in parallel)","span":{"file_name":"C:\\Users\\tscol\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-counter-1.0.1\\src\\lib.rs","byte_start":2689,"byte_end":2799,"line_start":69,"line_end":69,"column_start":1,"column_end":111}},{"value":"/ * `a_local` could be increment to 6 and `b_local` be incremented to 5 (e.g. if thread 2 ran after thread 1).","span":{"file_name":"C:\\Users\\tscol\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-counter-1.0.1\\src\\lib.rs","byte_start":2800,"byte_end":2912,"line_start":70,"line_end":70,"column_start":1,"column_end":113}},{"value":"/ * Additionally, if at least one counter is a `RelaxedCounter`, we cannot make","span":{"file_name":"C:\\Users\\tscol\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-counter-1.0.1\\src\\lib.rs","byte_start":2913,"byte_end":2994,"line_start":71,"line_end":71,"column_start":1,"column_end":82}},{"value":"/     assumption on the order of `a.inc()` and `b.inc()`. Thus, in this case","span":{"file_name":"C:\\Users\\tscol\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-counter-1.0.1\\src\\lib.rs","byte_start":2995,"byte_end":3073,"line_start":72,"line_end":72,"column_start":1,"column_end":79}},{"value":"/     thread 2 can also observe `a_local` to be 5 (not incremented yet) but","span":{"file_name":"C:\\Users\\tscol\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-counter-1.0.1\\src\\lib.rs","byte_start":3074,"byte_end":3151,"line_start":73,"line_end":73,"column_start":1,"column_end":78}},{"value":"/     `b_local` to be incremented to 5, _breaking the invariant_ `a > b`.","span":{"file_name":"C:\\Users\\tscol\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-counter-1.0.1\\src\\lib.rs","byte_start":3152,"byte_end":3227,"line_start":74,"line_end":74,"column_start":1,"column_end":76}},{"value":"/     Note that if thread 2 (or any other thread) `get()` the counts","span":{"file_name":"C:\\Users\\tscol\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-counter-1.0.1\\src\\lib.rs","byte_start":3228,"byte_end":3298,"line_start":75,"line_end":75,"column_start":1,"column_end":71}},{"value":"/     again, at some point they will observe both values to be incremented.","span":{"file_name":"C:\\Users\\tscol\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-counter-1.0.1\\src\\lib.rs","byte_start":3299,"byte_end":3376,"line_start":76,"line_end":76,"column_start":1,"column_end":78}},{"value":"/     No operations will be lost. It is only the _ordering_ of the operations","span":{"file_name":"C:\\Users\\tscol\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-counter-1.0.1\\src\\lib.rs","byte_start":3377,"byte_end":3456,"line_start":77,"line_end":77,"column_start":1,"column_end":80}},{"value":"/     that cannot be assumed if `Ordering` is `Relaxed`.","span":{"file_name":"C:\\Users\\tscol\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-counter-1.0.1\\src\\lib.rs","byte_start":3457,"byte_end":3515,"line_start":78,"line_end":78,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\tscol\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-counter-1.0.1\\src\\lib.rs","byte_start":3516,"byte_end":3519,"line_start":79,"line_end":79,"column_start":1,"column_end":4}},{"value":"/ So in order to maintain invariants such as `a > b` across multiple threads,","span":{"file_name":"C:\\Users\\tscol\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-counter-1.0.1\\src\\lib.rs","byte_start":3520,"byte_end":3599,"line_start":80,"line_end":80,"column_start":1,"column_end":80}},{"value":"/ use `ConsistentCounter`.","span":{"file_name":"C:\\Users\\tscol\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-counter-1.0.1\\src\\lib.rs","byte_start":3600,"byte_end":3628,"line_start":81,"line_end":81,"column_start":1,"column_end":29}}]},{"kind":"Trait","id":{"krate":0,"index":13},"span":{"file_name":"C:\\Users\\tscol\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-counter-1.0.1\\src\\lib.rs","byte_start":3801,"byte_end":3814,"line_start":87,"line_end":87,"column_start":11,"column_end":24},"name":"AtomicCounter","qualname":"::AtomicCounter","value":"AtomicCounter: Send + Sync","parent":null,"children":[{"krate":0,"index":14},{"krate":0,"index":15},{"krate":0,"index":16},{"krate":0,"index":17},{"krate":0,"index":18},{"krate":0,"index":19}],"decl_id":null,"docs":" Provides an atomic counter trait that can be shared across threads.\n","sig":null,"attributes":[{"value":"/ Provides an atomic counter trait that can be shared across threads.","span":{"file_name":"C:\\Users\\tscol\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-counter-1.0.1\\src\\lib.rs","byte_start":3719,"byte_end":3790,"line_start":86,"line_end":86,"column_start":1,"column_end":72}}]},{"kind":"Type","id":{"krate":0,"index":14},"span":{"file_name":"C:\\Users\\tscol\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-counter-1.0.1\\src\\lib.rs","byte_start":3906,"byte_end":3919,"line_start":89,"line_end":89,"column_start":10,"column_end":23},"name":"PrimitiveType","qualname":"::AtomicCounter::PrimitiveType","value":"type PrimitiveType;","parent":{"krate":0,"index":13},"children":[],"decl_id":null,"docs":" Underlying primitive type that is being shared atomically.\n","sig":null,"attributes":[{"value":"/ Underlying primitive type that is being shared atomically.","span":{"file_name":"C:\\Users\\tscol\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-counter-1.0.1\\src\\lib.rs","byte_start":3834,"byte_end":3896,"line_start":88,"line_end":88,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":15},"span":{"file_name":"C:\\Users\\tscol\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-counter-1.0.1\\src\\lib.rs","byte_start":4011,"byte_end":4014,"line_start":92,"line_end":92,"column_start":8,"column_end":11},"name":"inc","qualname":"::AtomicCounter::inc","value":"pub fn inc(&Self) -> Self::PrimitiveType","parent":{"krate":0,"index":13},"children":[],"decl_id":null,"docs":" Atomically increments the counter by one, returning the _previous_ value.\n","sig":null,"attributes":[{"value":"/ Atomically increments the counter by one, returning the _previous_ value.","span":{"file_name":"C:\\Users\\tscol\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-counter-1.0.1\\src\\lib.rs","byte_start":3926,"byte_end":4003,"line_start":91,"line_end":91,"column_start":5,"column_end":82}}]},{"kind":"Method","id":{"krate":0,"index":16},"span":{"file_name":"C:\\Users\\tscol\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-counter-1.0.1\\src\\lib.rs","byte_start":4139,"byte_end":4142,"line_start":95,"line_end":95,"column_start":8,"column_end":11},"name":"add","qualname":"::AtomicCounter::add","value":"pub fn add(&Self, Self::PrimitiveType) -> Self::PrimitiveType","parent":{"krate":0,"index":13},"children":[],"decl_id":null,"docs":" Atomically increments the counter by amount, returning the _previous_ value.\n","sig":null,"attributes":[{"value":"/ Atomically increments the counter by amount, returning the _previous_ value.","span":{"file_name":"C:\\Users\\tscol\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-counter-1.0.1\\src\\lib.rs","byte_start":4051,"byte_end":4131,"line_start":94,"line_end":94,"column_start":5,"column_end":85}}]},{"kind":"Method","id":{"krate":0,"index":17},"span":{"file_name":"C:\\Users\\tscol\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-counter-1.0.1\\src\\lib.rs","byte_start":4300,"byte_end":4303,"line_start":98,"line_end":98,"column_start":8,"column_end":11},"name":"get","qualname":"::AtomicCounter::get","value":"pub fn get(&Self) -> Self::PrimitiveType","parent":{"krate":0,"index":13},"children":[],"decl_id":null,"docs":" Atomically gets the current value of the counter, without modifying the counter.\n","sig":null,"attributes":[{"value":"/ Atomically gets the current value of the counter, without modifying the counter.","span":{"file_name":"C:\\Users\\tscol\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-counter-1.0.1\\src\\lib.rs","byte_start":4208,"byte_end":4292,"line_start":97,"line_end":97,"column_start":5,"column_end":89}}]},{"kind":"Method","id":{"krate":0,"index":18},"span":{"file_name":"C:\\Users\\tscol\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-counter-1.0.1\\src\\lib.rs","byte_start":4438,"byte_end":4443,"line_start":101,"line_end":101,"column_start":8,"column_end":13},"name":"reset","qualname":"::AtomicCounter::reset","value":"pub fn reset(&Self) -> Self::PrimitiveType","parent":{"krate":0,"index":13},"children":[],"decl_id":null,"docs":" Atomically returns the current value of the counter, while resetting to count to zero.\n","sig":null,"attributes":[{"value":"/ Atomically returns the current value of the counter, while resetting to count to zero.","span":{"file_name":"C:\\Users\\tscol\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-counter-1.0.1\\src\\lib.rs","byte_start":4340,"byte_end":4430,"line_start":100,"line_end":100,"column_start":5,"column_end":95}}]},{"kind":"Method","id":{"krate":0,"index":19},"span":{"file_name":"C:\\Users\\tscol\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-counter-1.0.1\\src\\lib.rs","byte_start":4685,"byte_end":4695,"line_start":106,"line_end":106,"column_start":8,"column_end":18},"name":"into_inner","qualname":"::AtomicCounter::into_inner","value":"pub fn into_inner(Self) -> Self::PrimitiveType","parent":{"krate":0,"index":13},"children":[],"decl_id":null,"docs":" Consume the atomic counter and return the primitive type.","sig":null,"attributes":[{"value":"/ Consume the atomic counter and return the primitive type.","span":{"file_name":"C:\\Users\\tscol\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-counter-1.0.1\\src\\lib.rs","byte_start":4480,"byte_end":4541,"line_start":103,"line_end":103,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\tscol\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-counter-1.0.1\\src\\lib.rs","byte_start":4546,"byte_end":4549,"line_start":104,"line_end":104,"column_start":5,"column_end":8}},{"value":"/ This is safe because passing self by value guarantees that no other threads are concurrently accessing the atomic data.","span":{"file_name":"C:\\Users\\tscol\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-counter-1.0.1\\src\\lib.rs","byte_start":4554,"byte_end":4677,"line_start":105,"line_end":105,"column_start":5,"column_end":128}}]},{"kind":"Struct","id":{"krate":0,"index":38},"span":{"file_name":"C:\\Users\\tscol\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-counter-1.0.1\\src\\lib.rs","byte_start":5122,"byte_end":5136,"line_start":117,"line_end":117,"column_start":12,"column_end":26},"name":"RelaxedCounter","qualname":"::RelaxedCounter","value":"","parent":null,"children":[],"decl_id":null,"docs":" Implementation of [`AtomicCounter`](trait.AtomicCounter.html) that uses\n [`Relaxed`](https://doc.rust-lang.org/std/sync/atomic/enum.Ordering.html#variant.Relaxed)\n memory ordering.","sig":null,"attributes":[{"value":"/ Implementation of [`AtomicCounter`](trait.AtomicCounter.html) that uses","span":{"file_name":"C:\\Users\\tscol\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-counter-1.0.1\\src\\lib.rs","byte_start":4729,"byte_end":4804,"line_start":109,"line_end":109,"column_start":1,"column_end":76}},{"value":"/ [`Relaxed`](https://doc.rust-lang.org/std/sync/atomic/enum.Ordering.html#variant.Relaxed)","span":{"file_name":"C:\\Users\\tscol\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-counter-1.0.1\\src\\lib.rs","byte_start":4805,"byte_end":4898,"line_start":110,"line_end":110,"column_start":1,"column_end":94}},{"value":"/ memory ordering.","span":{"file_name":"C:\\Users\\tscol\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-counter-1.0.1\\src\\lib.rs","byte_start":4899,"byte_end":4919,"line_start":111,"line_end":111,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\tscol\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-counter-1.0.1\\src\\lib.rs","byte_start":4920,"byte_end":4923,"line_start":112,"line_end":112,"column_start":1,"column_end":4}},{"value":"/ See [crate level documentation](index.html) for more details.","span":{"file_name":"C:\\Users\\tscol\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-counter-1.0.1\\src\\lib.rs","byte_start":4924,"byte_end":4989,"line_start":113,"line_end":113,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\tscol\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-counter-1.0.1\\src\\lib.rs","byte_start":4990,"byte_end":4993,"line_start":114,"line_end":114,"column_start":1,"column_end":4}},{"value":"/ Note that all operations wrap if the counter is incremented beyond usize::max_value().","span":{"file_name":"C:\\Users\\tscol\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-counter-1.0.1\\src\\lib.rs","byte_start":4994,"byte_end":5084,"line_start":115,"line_end":115,"column_start":1,"column_end":91}}]},{"kind":"Method","id":{"krate":0,"index":21},"span":{"file_name":"C:\\Users\\tscol\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-counter-1.0.1\\src\\lib.rs","byte_start":5235,"byte_end":5238,"line_start":122,"line_end":122,"column_start":12,"column_end":15},"name":"new","qualname":"<RelaxedCounter>::new","value":"pub fn new(usize) -> RelaxedCounter","parent":null,"children":[],"decl_id":null,"docs":" Creates a new counter with initial_value\n","sig":null,"attributes":[{"value":"/ Creates a new counter with initial_value","span":{"file_name":"C:\\Users\\tscol\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-counter-1.0.1\\src\\lib.rs","byte_start":5179,"byte_end":5223,"line_start":121,"line_end":121,"column_start":5,"column_end":49}}]},{"kind":"Struct","id":{"krate":0,"index":45},"span":{"file_name":"C:\\Users\\tscol\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-counter-1.0.1\\src\\lib.rs","byte_start":6183,"byte_end":6200,"line_start":159,"line_end":159,"column_start":12,"column_end":29},"name":"ConsistentCounter","qualname":"::ConsistentCounter","value":"","parent":null,"children":[],"decl_id":null,"docs":" Implementation of [`AtomicCounter`](trait.AtomicCounter.html) that uses\n [`Sequentially Consistent`](https://doc.rust-lang.org/std/sync/atomic/enum.Ordering.html#variant.SeqCst)\n memory ordering.","sig":null,"attributes":[{"value":"/ Implementation of [`AtomicCounter`](trait.AtomicCounter.html) that uses","span":{"file_name":"C:\\Users\\tscol\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-counter-1.0.1\\src\\lib.rs","byte_start":5775,"byte_end":5850,"line_start":151,"line_end":151,"column_start":1,"column_end":76}},{"value":"/ [`Sequentially Consistent`](https://doc.rust-lang.org/std/sync/atomic/enum.Ordering.html#variant.SeqCst)","span":{"file_name":"C:\\Users\\tscol\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-counter-1.0.1\\src\\lib.rs","byte_start":5851,"byte_end":5959,"line_start":152,"line_end":152,"column_start":1,"column_end":109}},{"value":"/ memory ordering.","span":{"file_name":"C:\\Users\\tscol\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-counter-1.0.1\\src\\lib.rs","byte_start":5960,"byte_end":5980,"line_start":153,"line_end":153,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\tscol\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-counter-1.0.1\\src\\lib.rs","byte_start":5981,"byte_end":5984,"line_start":154,"line_end":154,"column_start":1,"column_end":4}},{"value":"/ See [crate level documentation](index.html) for more details.","span":{"file_name":"C:\\Users\\tscol\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-counter-1.0.1\\src\\lib.rs","byte_start":5985,"byte_end":6050,"line_start":155,"line_end":155,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\tscol\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-counter-1.0.1\\src\\lib.rs","byte_start":6051,"byte_end":6054,"line_start":156,"line_end":156,"column_start":1,"column_end":4}},{"value":"/ Note that all operations wrap if the counter is incremented beyond usize::max_value().","span":{"file_name":"C:\\Users\\tscol\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-counter-1.0.1\\src\\lib.rs","byte_start":6055,"byte_end":6145,"line_start":157,"line_end":157,"column_start":1,"column_end":91}}]},{"kind":"Method","id":{"krate":0,"index":30},"span":{"file_name":"C:\\Users\\tscol\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-counter-1.0.1\\src\\lib.rs","byte_start":6302,"byte_end":6305,"line_start":164,"line_end":164,"column_start":12,"column_end":15},"name":"new","qualname":"<ConsistentCounter>::new","value":"pub fn new(usize) -> ConsistentCounter","parent":null,"children":[],"decl_id":null,"docs":" Creates a new counter with initial_value\n","sig":null,"attributes":[{"value":"/ Creates a new counter with initial_value","span":{"file_name":"C:\\Users\\tscol\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-counter-1.0.1\\src\\lib.rs","byte_start":6246,"byte_end":6290,"line_start":163,"line_end":163,"column_start":5,"column_end":49}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"C:\\Users\\tscol\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-counter-1.0.1\\src\\lib.rs","byte_start":5157,"byte_end":5171,"line_start":119,"line_end":119,"column_start":6,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":21}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"C:\\Users\\tscol\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-counter-1.0.1\\src\\lib.rs","byte_start":5369,"byte_end":5383,"line_start":127,"line_end":127,"column_start":24,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":23},{"krate":0,"index":24},{"krate":0,"index":25},{"krate":0,"index":26},{"krate":0,"index":27},{"krate":0,"index":28}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":"C:\\Users\\tscol\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-counter-1.0.1\\src\\lib.rs","byte_start":6221,"byte_end":6238,"line_start":161,"line_end":161,"column_start":6,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":30}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"C:\\Users\\tscol\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-counter-1.0.1\\src\\lib.rs","byte_start":6442,"byte_end":6459,"line_start":169,"line_end":169,"column_start":24,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":32},{"krate":0,"index":33},{"krate":0,"index":34},{"krate":0,"index":35},{"krate":0,"index":36},{"krate":0,"index":37}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"C:\\Users\\tscol\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-counter-1.0.1\\src\\lib.rs","byte_start":3816,"byte_end":3820,"line_start":87,"line_end":87,"column_start":26,"column_end":30},"kind":"SuperTrait","from":{"krate":2,"index":2989},"to":{"krate":0,"index":13}},{"span":{"file_name":"C:\\Users\\tscol\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-counter-1.0.1\\src\\lib.rs","byte_start":3823,"byte_end":3827,"line_start":87,"line_end":87,"column_start":33,"column_end":37},"kind":"SuperTrait","from":{"krate":2,"index":3001},"to":{"krate":0,"index":13}},{"span":{"file_name":"C:\\Users\\tscol\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-counter-1.0.1\\src\\lib.rs","byte_start":5157,"byte_end":5171,"line_start":119,"line_end":119,"column_start":6,"column_end":20},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":38},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\tscol\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-counter-1.0.1\\src\\lib.rs","byte_start":5369,"byte_end":5383,"line_start":127,"line_end":127,"column_start":24,"column_end":38},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":38},"to":{"krate":0,"index":13}},{"span":{"file_name":"C:\\Users\\tscol\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-counter-1.0.1\\src\\lib.rs","byte_start":6221,"byte_end":6238,"line_start":161,"line_end":161,"column_start":6,"column_end":23},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":45},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\tscol\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-counter-1.0.1\\src\\lib.rs","byte_start":6442,"byte_end":6459,"line_start":169,"line_end":169,"column_start":24,"column_end":41},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":45},"to":{"krate":0,"index":13}}]}